<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - matteo's blog</title><link>https://matteo-gz.github.io/posts/</link><description>All Posts | matteo's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 08 Aug 2023 19:31:19 +0800</lastBuildDate><atom:link href="https://matteo-gz.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>音频转文字 Whisper</title><link>https://matteo-gz.github.io/posts/whisper/</link><pubDate>Tue, 08 Aug 2023 19:31:19 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/whisper/</guid><description><![CDATA[简介 一个音频转文本的模型 https://github.com/openai/whisper
依赖 python ffmpeg 命令行使用 验证GPU 在venv环境下 输入whisper -h
&ndash;device # 如果默认是cpu 则证明cuda安装失败
# 这样也能验证cuda是否安装了 python -c &#34;import torch; print(torch.version.cuda)&#34; 重装torch gpu版本
# 卸载纯cpu版 pip uninstall torch # clean cache pip cache purge # copy from https://pytorch.org/get-started/locally/ pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118 再次验证 whisper -h
&ndash;device # 如果默认是cuda 则证明成功
运行demo
whisper {vocieFile} --model large-v2 --model_dir {modelPath} \ --ourput_dir {outputDir} --output_format txt --device cuda --language Chinese 界面版 界面版 https://github.]]></description></item><item><title>咒语生成图片 Stable Diffusion web UI</title><link>https://matteo-gz.github.io/posts/stablediffusionwebui/</link><pubDate>Tue, 08 Aug 2023 11:20:56 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/stablediffusionwebui/</guid><description>简介 旨在个人快速回忆Stable Diffusion相关关系
Stable Diffusion 是一个深度学习,文转图模型.
Stable Diffusion web UI 即面向用户提供界面操作工具, 链接为
https://github.com/AUTOMATIC1111/stable-diffusion-webui
其中该界面为英语,支持汉化插件
https://github.com/VinsonLaro/stable-diffusion-webui-chinese
PyTorch 官网 https://pytorch.org/ 是一个深度学习的框架
我的安装选择
OS: Windows package: pip language: python compute Platform: CUDA 教程 https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki
启动 下载完web UI后,运行webui-user.bat即可
在运行过程避免不了报错,很考验python debug能力。
初始化
设置webui-user.bat参数
set PYTHON= #python文件路径 set GIT= # git文件路径 set VENV_DIR= # venv目录 set COMMANDLINE_ARGS= # 默认不用填 缓存冲突解决
直接删除./venv/lib/site-packages/下冲突的包,重新运行脚本
模型位置
一般放入./models/Stable-diffusion/
.bat window平台下.bat脚本语法
:: 这是注释 venv 是Python的一个模块,用于创建隔离的Python环境。
虚拟环境允许你在同一台计算机上同时管理多个Python项目，每个项目都有自己独立的Python解释器和库。
这对于避免不同项目之间的依赖冲突非常有用，因为每个虚拟环境都有自己的依赖安装
# 创建虚拟环境 python3 -m venv myenv # 激活虚拟环境 .</description></item><item><title>关于Go代码生成</title><link>https://matteo-gz.github.io/posts/gencode/</link><pubDate>Mon, 07 Aug 2023 16:24:58 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/gencode/</guid><description>目的 Go Kitex提供了自定义模板生成代码,使用起来挺方便的.
有望改造成支持公司内部go代码生成工具
https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/custom_tpl/ 处理要素 cli工具整合 这里推荐2个包,封装了cli和参数解析
https://github.com/spf13/cobra https://github.com/spf13/pflag 基本数据对象定义 提供了文件生成时的数据渲染对象 PackageInfo
模板渲染使用html/template语法
额外参数在context中解析 cli传递参数过多会带来复杂性,需要额外的.json文件数据提供在上下文中解析.
多模板文件定义 通过指定目录加载其下所有模板文件
模板文件格式为.yaml
生成的文件路径也支持变量解析.
其中能独立定义新增代码部分
统一入口 初始化和更新行为都为同一命令,减少处理成本
额外点 多任务并行处理文件生成 跨平台支持</description></item><item><title>go pkg包设计</title><link>https://matteo-gz.github.io/posts/component/</link><pubDate>Mon, 07 Aug 2023 15:28:13 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/component/</guid><description><![CDATA[设计考虑 以下是个人的建议,随便看看了解下
context支持 一般入参数context是第一个参数,提供了timeout机制
logger接口定义 在组件的初始化时,将使用方的日志实例进行接口约束,
要求实现其debug,error级别method.
可以参考gorm的logger设计
hook注入 方便使用方对metric的收集,可以参考redis hook设计
布局了解 这里只是提供参考建议
go官方 https://github.com/golang-standards/project-layout 知道internal目录对内部系统的保护
链接 https://go.dev/doc/go1.4#internalpackages 跨平台支持 查看支持平台
go tool dist list 条件编译约束
//go:build (linux &amp;&amp; 386) || (darwin &amp;&amp; !cgo) https://pkg.go.dev/cmd/go#hdr-Build_constraints
linters集成 https://golangci-lint.run/ 提高代码质量
版本约束 具体查看 https://go.dev/ref/mod#versions
依赖注入 https://github.com/google/wire
使得依赖关系变得整洁
参数配置 Functional Options Pattern,代码优雅
IDL https://protobuf.dev/ 利用protobuf提供接口和配置的定义.
验证项目得分 https://goreportcard.com/
评估项含
gofmt go vet go lint gocyclo ]]></description></item><item><title>聊天系统设计调研</title><link>https://matteo-gz.github.io/posts/im/</link><pubDate>Mon, 07 Aug 2023 12:23:04 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/im/</guid><description>总体架构分层
接入层,无状态 逻辑层 存储层 这里是参考了陌陌设计
连接层 这里有2种方案选择
WebSocket MQTT 关于MQTT,有EMQX中间件.
消息上线可以走HTTP接口,即客户端发给服务端消息
消息下行可以走EMQX订阅主题,即服务端推送消息给客户端
连接层属于无状态,支持水平扩展.
逻辑层 通用消息格式定制
以及业务路由分发决策
设计规则
不丢消息 需要业务ACK机制
消息去重 服务端与客户端都需要做到
时序一致性 可以用snowflake算法.
利用局部性原理减少id生成器压力,有利于水平扩展
缓存设计 由于实时系统,基本上有一层cache,类似内核系统的buffer。
多级缓冲,面向c端场景的话一般链路不会太长,而且要考虑数据回种,分布式一致性挑战.
大概local cache -&amp;gt; redis （读写分离)-&amp;gt; database（读写分离)
其他考虑场景 接入APP推送 接入风控 数据多端同步 多条消息打包与压缩格式设计 万人大群的数据扇出 明星突发性空降某频道 数据埋点监控 系统自动扩容 存储层 离线消息 如果需求量不大,Mysql即可以解决.
聊天应用的读写比例大概是1:1.
数据库 Cassandra
Discord公司有在用.偏向AP场景
HBase
Facebook公司有在用.偏向CP场景
个人想法 前期用Mysql,但是封装一层接口,为后期数据库迁移作准备.
大数据库选择要还看云数据库商支持程度,说不定还有其他云产品合适.
对象存储 minio
消息队列 rabbitMQ比较适合业务,
但是追求高吞吐的kafka,自己必须封装多一层机制来保证业务的一致性.</description></item><item><title>go微服务框架使用总结</title><link>https://matteo-gz.github.io/posts/goframe/</link><pubDate>Tue, 18 Jul 2023 13:03:09 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/goframe/</guid><description>记录下自己使用下来的go微服务框架,kratos go-zero kitex.
kratos bilibili公司出品的框架,当年公司内部代码泄漏,现在开源优化已经到了v2版本.
参考了DDD,Clean Architecture 设计理念.
项目结构清晰,每一层级的角色定位清晰,没有全局变量污染,还引入了wire进行依赖倒置.
data层暴露了clean up函数对资源句柄进行回收.
框架层与业务层解耦,框架生命周期感知清晰.
组件开放接口设计,扩展性强
服务使用的是GRPC+Protocol Buffer, 同一服务进程下暴露了GRPC端口和HTTP端口.
HTTP是通过protoc组件protoc-gen-go-http反射路由到同一RPC方法.
框架整体设计比较轻量,适合自己组合微服务方案.
总结 适合团队有架构组的人使用,前期需要自己组合方案,整合组件.后期基本完善,使用体验良好. HTTP层建议使用gin框架,因为protoc-gen-go-http适合开发阶段调试用,重度需求满足不了,自己做适配一路都是新坑.
Go-zero 一个公司CTO主推项目,加入了CNCF.
HTTP单独部署一个项目,路由方法定义通过编写.api后缀文件(Go-zero定义的语法)实现.
他们的设计理念是实用性.
总结 生产上能用。对于定制化业务,直接fork他们官方的cli工具,然后公司内部修改维护该仓库.
Kitex 字节跳动公司的开源项目,分RPC框架Kitex和HTTP框架Hertz.
2个框架是2个团队的产物,设计规范不一致.
框架替换原有了go/net设计,实现高性能.(生产稳定性需要查阅官方资料验证)
IDL支持Thrift,官方对Thrift的支持度很高,因为他们内部使用Thrift,但也支持Protobuf.
他们的设计理念是高性能
总结 Kitex只是cloudwego组织下子项目,Thrift不是特别吸引我, 希望cloudwego/netpoll能封装成一个适配性高组件.</description></item><item><title>体验switch游戏</title><link>https://matteo-gz.github.io/posts/switchgame/</link><pubDate>Sat, 06 May 2023 19:31:52 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/switchgame/</guid><description>主机游戏 steam的单机游戏体验过一段时间后,随后了解到还有塞尔达传说王国之泪这样的游戏存在,有别于艾尔登法环这种 但是他只能在任天堂的switch上可以下载游玩,有别于pc游戏是主机游戏来的.
模拟器 pc上也存在着模拟switch游戏环境的模拟软件,yuzu模拟器和ryujinx模拟器,接下来我将体验下ryujinx模拟器上游玩主机游戏
ryujinx模拟器体验 下载 下载模拟器https://github.com/Ryujinx/release-channel-master/releases
我选了当前最新的1.1.762版本 https://github.com/Ryujinx/release-channel-master/releases/download/1.1.762/test-ava-ryujinx-1.1.762-win_x64.zip
先决 下载安装后,看了一眼官网wikihttps://github.com/Ryujinx/Ryujinx/wiki
在模拟器的目录下新建portable目录,需要导入任天堂switch相关的Keys和Firmware,即密钥和系统固件的意思,2者的版本还必须一致.
游戏格式 接下来就是导入游戏包xci格式的,就可以在模拟器的目录上看到该游戏，点击游玩即可。
游戏DLC或者游戏更新包之类的安装文件大多是nsp格式的,在游戏上进行管理导入即可。
switch游戏的外挂是金手指这个称呼,可以搜switch对应game的cheat code主题。
总结 模拟器比较吃cpu资源,很多时候成为瓶颈.相比于switch游戏画面和帧数比较高,而且还可以开作弊码,省去重复的游戏体验。
switch的优势就是携带游玩方便,类似手机于pc的存在,但是steam deck是linux系统也可以安装模拟器,也有这个优势.
另一个就是switch可以联网官方服务器游玩比较方便,但是局域网联机游玩模拟器似乎也能做到。
随着一款游戏的了解,我慢慢发现任天堂的理念是以游戏趣味性为主导,switch设备为游戏圈子所建立的生态, 其他游戏像是一座座高山,但是switch游戏就像一条弯弯曲曲的河流那样的存在</description></item><item><title>Synergy启动在登录前</title><link>https://matteo-gz.github.io/posts/synergy/</link><pubDate>Sat, 06 May 2023 18:51:35 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/synergy/</guid><description><![CDATA[介绍 Synergy是一个模拟键盘和鼠标的软件，我的win和mac都启动时可以用一套键鼠操控。 mac作为Synergy的客户端时，win作为Synergy的服务端使用。
背景 目前Synergy在登录前软件没有启动,只有登录后启动,导致登录时无法输入密码,因为我的键盘鼠标连接在win上。下面是解决办法
原理 软件在mac未登录前是root的身份运行，登录后才是选择的用户,在root身份下将软件加入mac的Launch Daemons就可以解决了
实操 synergy的存放位置是 /Applications/Synergy.app/Contents/MacOS/synergy
运行命令行启动
open /Applications/Synergy.app/Contents/MacOS/synergy 时,可以看到启动参数 /Applications/Synergy.app/Contents/MacOS/synergyc -f --no-tray --debug INFO --name &quot;mac&quot; &quot;192.168.50.59:24800&quot;
修改为Launch Daemons的配置
&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt; &lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&gt; &lt;plist version=&#34;1.0&#34;&gt; &lt;dict&gt; &lt;key&gt;Label&lt;/key&gt; &lt;string&gt;com.example.hello&lt;/string&gt; &lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt; &lt;string&gt;/Applications/Synergy.app/Contents/MacOS/synergyc&lt;/string&gt; &lt;string&gt;-f&lt;/string&gt; &lt;string&gt;--no-tray&lt;/string&gt; &lt;string&gt;--debug&lt;/string&gt; &lt;string&gt;INFO&lt;/string&gt; &lt;string&gt;--name&lt;/string&gt; &lt;string&gt;mac&lt;/string&gt; &lt;string&gt;192.168.50.59:24800&lt;/string&gt; &lt;/array&gt; &lt;key&gt;KeepAlive&lt;/key&gt; &lt;true/&gt; &lt;/dict&gt; &lt;/plist&gt; ProgramArguments对象下是cli启动参数
然后以root身份 放入 /Library/LaunchDaemons/ 下,文件名随便起一个com.example.synergy.plist
这样重启后,就可以在mac上输入密码,当键盘连接在win上时候，因为synergy已经生效
总结 # 敲root密码 sudo su # 切目录 cd /Library/LaunchDaemons/ #创建文件 touch com.]]></description></item><item><title>Steam游戏无法识别北通手柄</title><link>https://matteo-gz.github.io/posts/steam/</link><pubDate>Tue, 21 Feb 2023 16:37:17 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/steam/</guid><description>每当兴冲冲下一个好玩的游戏，进入却发现手柄识别不了，或者识别不全。 一个杂牌的手柄属实是折腾人，网上兜了一圈，方法很多，但是适用自己电脑情况的还是很少。 最佳的解决方案就是买个微软的xbox手柄。
次一点的解决方案就是用软件模拟出xbox360的手柄，然后进入游戏就可以正常游玩了。下面重点写下如何达成
xOutput使用 前提 首先来个前提，游戏必须安装在无中文路径，各种微软的游戏依赖库安装齐全。网络问题的话，下个uu加速器处理下
我自己的电脑系统是win11
我使用的模拟软件是xOutput https://github.com/csutorasa/XOutput
配置 下载安装后，打开xOutput，手柄录入键位映射，把手柄的所有按键都输入一边， 然后方向轴看是否录入是否正确(我遇到一个右键上下的位置对调了，然后这个键位勾选反转就行),接下来下拉绑定选择北通的控制器，然后保存配置。 (这个的使用搜b站的视频比较方便，文字描述这里写不下.)
使用 接下来再关闭，以管理员权限打开xOutput(这点很重要！！)再点击开始,启用这个模拟的控制器
这时一般window的设备管理器，会识别出2个手柄设备，一个是北通自己的原有手柄，另一个是模拟出来的xbox360手柄
此时我们点开steam，通用的手柄管理一般也会识别出2个手柄。
配置steam 这时游戏启用steam手柄输入。
手柄设置那里关闭 playstation，任天堂switch相关。
勾选通用，xbox，xbox扩展支持就行。
这时打开游戏就能完了。如果失败，重启电脑，必须控制软件打开的先后顺序，
先打开 xOutput 以管理员权限,
再打开steam，
再打开游戏。
心得 接下来是坑总结
设备管理器确保是2个，一个北通自带，一个虚拟出来的。我之前安装了ds4windows，勾选了隐藏北通的控制器，导致xOutput失效。
管理员权限运行xOutput这点也很重要
其他软件 x360ce 这个软件我也试过，用起来时灵时不灵。
如果问题还没解决，可以搜下其他的模拟xbox360的软件 https://alternativeto.net/software/x360ce/
具体可以看这篇文章，我就是在这个文章找到xOutput的
推荐 用了steam 这么久，发现2个好用软件，
一个是steam账号切换器 可以方便的管理多个steam账号，但是记住限制切号器的网络，可以用火绒来控制软件的网络
另一个是msi afterburner 可以用来显示游戏的帧率,显卡内存占用等等</description></item><item><title>Graylog搭建</title><link>https://matteo-gz.github.io/posts/graylog/</link><pubDate>Tue, 13 Dec 2022 17:05:56 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/graylog/</guid><description><![CDATA[克隆项目 https://github.com/Graylog2/docker-compose
配置文件 cd open-core cp .env.example .env 修改.env #.env GRAYLOG_PASSWORD_SECRET=&#34;你的16位密码&#34; # 密钥= echo -n 你的16位密码 | shasum -a 256 GRAYLOG_ROOT_PASSWORD_SHA2=&#34;密钥&#34; 修改docker-compose.yml # graylog.environment - 位置 GRAYLOG_HTTP_EXTERNAL_URI: &#34;https://你的域名.com/graylog&#34; 启动 docker-compose up -d
配置域名 sudo vi /etc/hosts
x.x.x.x graylog 配置nginx location /graylog/ { proxy_pass http://graylog:9000/; proxy_redirect off; proxy_http_version 1.1; proxy_set_header Connection &#34;&#34;; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Real-IP $remote_addr; proxy_connect_timeout 2s; proxy_read_timeout 90s; proxy_send_timeout 90s; } location /graylog1/ { proxy_pass http://graylog:12201/; proxy_redirect off; proxy_http_version 1.]]></description></item></channel></rss>