<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - matteo's blog</title><link>https://matteo-gz.github.io/posts/</link><description>All Posts | matteo's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Feb 2023 16:37:17 +0800</lastBuildDate><atom:link href="https://matteo-gz.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Steam游戏无法识别北通手柄</title><link>https://matteo-gz.github.io/posts/steam/</link><pubDate>Tue, 21 Feb 2023 16:37:17 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/steam/</guid><description>每当兴冲冲下一个好玩的游戏，进入却发现手柄识别不了，或者识别不全。 一个杂牌的手柄属实是折腾人，网上兜了一圈，方法很多，但是适用自己电脑情况的还是很少。 最佳的解决方案就是买个微软的xbox手柄。
次一点的解决方案就是用软件模拟出xbox360的手柄，然后进入游戏就可以正常游玩了。下面重点写下如何达成
xOutput使用 前提 首先来个前提，游戏必须安装在无中文路径，各种微软的游戏依赖库安装齐全。网络问题的话，下个uu加速器处理下
我自己的电脑系统是win11
我使用的模拟软件是xOutput https://github.com/csutorasa/XOutput
配置 下载安装后，打开xOutput，手柄录入键位映射，把手柄的所有按键都输入一边， 然后方向轴看是否录入是否正确(我遇到一个右键上下的位置对调了，然后这个键位勾选反转就行),接下来下拉绑定选择北通的控制器，然后保存配置。 (这个的使用搜b站的视频比较方便，文字描述这里写不下.)
使用 接下来再关闭，以管理员权限打开xOutput(这点很重要！！)再点击开始,启用这个模拟的控制器
这时一般window的设备管理器，会识别出2个手柄设备，一个是北通自己的原有手柄，另一个是模拟出来的xbox360手柄
此时我们点开steam，通用的手柄管理一般也会识别出2个手柄。
配置steam 这时游戏启用steam手柄输入。
手柄设置那里关闭 playstation，任天堂switch相关。
勾选通用，xbox，xbox扩展支持就行。
这时打开游戏就能完了。如果失败，重启电脑，必须控制软件打开的先后顺序，
先打开 xOutput 以管理员权限,
再打开steam，
再打开游戏。
心得 接下来是坑总结
设备管理器确保是2个，一个北通自带，一个虚拟出来的。我之前安装了ds4windows，勾选了隐藏北通的控制器，导致xOutput失效。
管理员权限运行xOutput这点也很重要
其他软件 x360ce 这个软件我也试过，用起来时灵时不灵。
如果问题还没解决，可以搜下其他的模拟xbox360的软件 https://alternativeto.net/software/x360ce/
具体可以看这篇文章，我就是在这个文章找到xOutput的
推荐 用了steam 这么久，发现2个好用软件，
一个是steam账号切换器 可以方便的管理多个steam账号，但是记住限制切号器的网络，可以用火绒来控制软件的网络
另一个是msi afterburner 可以用来显示游戏的帧率,显卡内存占用等等</description></item><item><title>Graylog搭建</title><link>https://matteo-gz.github.io/posts/graylog/</link><pubDate>Tue, 13 Dec 2022 17:05:56 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/graylog/</guid><description><![CDATA[克隆项目 https://github.com/Graylog2/docker-compose
配置文件 cd open-core cp .env.example .env 修改.env #.env GRAYLOG_PASSWORD_SECRET=&#34;你的16位密码&#34; # 密钥= echo -n 你的16位密码 | shasum -a 256 GRAYLOG_ROOT_PASSWORD_SHA2=&#34;密钥&#34; 修改docker-compose.yml # graylog.environment - 位置 GRAYLOG_HTTP_EXTERNAL_URI: &#34;https://你的域名.com/graylog&#34; 启动 docker-compose up -d
配置域名 sudo vi /etc/hosts
x.x.x.x graylog 配置nginx location /graylog/ { proxy_pass http://graylog:9000/; proxy_redirect off; proxy_http_version 1.1; proxy_set_header Connection &#34;&#34;; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Real-IP $remote_addr; proxy_connect_timeout 2s; proxy_read_timeout 90s; proxy_send_timeout 90s; } location /graylog1/ { proxy_pass http://graylog:12201/; proxy_redirect off; proxy_http_version 1.]]></description></item><item><title>汇编学习</title><link>https://matteo-gz.github.io/posts/asm/</link><pubDate>Tue, 20 Sep 2022 10:10:04 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/asm/</guid><description><![CDATA[什么是汇编? ruanyifeng-汇编语言入门教程 Decode360&rsquo;s Blog-汇编基础入门知识 汇编学习 学习材料: Princeton大学汇编教程 Assembly1 Assembly2 AssemblyFunctions 这个pdf做的非常浅显易懂
tcoline.com-汇编语言 tcoline.com-汇编语言
这个网站的教程也不错,纯中文
w3c教程 https://www.w3cschool.cn/assembly/
函数调用原理 https://gitbook.coder.cat/function-call-principle/
学习记录 目录 编程语言级别:c语言-&gt;汇编语言-&gt;机器语言 x86-64汇编介绍 冯诺伊曼架构介绍 主存 寄存器 汇编函数调用过程 主存 0000000000000000 ... TEXT RODATA DATA BSS HEAP STACK ... FFFFFFFFFFFFFFFF 备注 Data Registers
RAX: register accumulator // R&quot;注册&quot;意思 RBX:register base RCX:register count RDX:register data Data Registers item detail
RAX: register accumulator // R&quot;register&quot; x &ldquo;extended&rdquo; [0,63] EAX: extended accumulator // E &ldquo;extended｜enhanced&rdquo; [0,31] AX: accumulator // [0,15] AH :accumulator higher // [8,15] AL :accumulator lower // [0,7] cont.]]></description></item><item><title>golang-mysql包</title><link>https://matteo-gz.github.io/posts/gomysql/</link><pubDate>Fri, 02 Sep 2022 10:30:09 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/gomysql/</guid><description>golang原生的mysql包是https://github.com/go-sql-driver/mysql
其中DSN (Data Source Name)格式username:password@protocol(address)/dbname?param=value
字段 介绍 username 数据库账号名 password 数据库密码 protocol 协议,tcp, address 数据库host地址 dbname 数据库名,此项为可选项 param 参数支持多个,且区分大小写 参数 默认 介绍 allowAllFiles false allowCleartextPasswords false allowNativePasswords true allowOldPasswords false charset 常用,字符集 checkConnLiveness true collation utf8mb4_general_ci clientFoundRows false columnsWithAlias false interpolateParams false loc UTC 常用,时区 maxAllowedPacket 4194304 multiStatements false parseTime false readTimeout 0 执行读开始计算时间,超过则中断 rejectReadOnly false serverPubKey none timeout OS default tls false writeTimeout 0 其他参数的填写则设置为系统变量,string要用单引号圈起来且url.QueryEscape处理
设置函数 SetMaxOpenConns 为最大连接数
SetMaxIdleConns 为最大空闲数,SetMaxIdleConns&amp;lt;=SetMaxOpenConns,一般不推荐用</description></item><item><title>Scalable Go Scheduler Design Doc 中文翻译</title><link>https://matteo-gz.github.io/posts/scalablegoschedulerdesigndoc/</link><pubDate>Thu, 04 Aug 2022 16:36:09 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/scalablegoschedulerdesigndoc/</guid><description>原文链接：https://golang.org/s/go11sched
以下是原文
Scalable Go Scheduler Design Doc Dmitry Vyukov dvyukov@google.com May 2, 2012 该文档假定您对Go 语言 和当前的 goroutine 调度程序实现有一定的了解。
当前调度程序的问题 当前的 goroutine 调度器限制了用 Go 编写的并发程序的可扩展性，特别是高吞吐量服务器和并行计算程序。 Vtocc 服务器在 8 核机器上最多可使用 70% 的 CPU，而性能分析显示 14% 用于runtime.futex(). 通常，调度程序可能会禁止用户在性能至关重要的情况下使用惯用的细粒度并发。
当前实现有什么问题：
单一全局互斥锁（Sched.Lock）和集中状态。互斥锁保护所有与 goroutine 相关的操作（创建、完成、重新调度等）。
Goroutine (G) 切换 (G.nextg)。工作线程 (M&amp;rsquo;s) 经常在彼此之间切换可运行的 goroutine，这可能会导致延迟增加和额外开销。每个 M 必须能够执行任何可运行的 G，尤其是刚刚创建 G 的 M。
每个M内存缓存（M.mcache）。内存缓存和其他缓存（堆栈分配）与所有 M 相关联，而它们只需要与 M 正在运行的 Go 代码相关联（在 syscall 内部阻塞的 M 不需要 mcache）。运行的 Go 代码的M 与所有 M 之间的比率可以高达 1:100。这会导致过多的资源消耗（每个 MCache 最多可吸收 2M）和较差的数据局部性。</description></item><item><title>go源码编译</title><link>https://matteo-gz.github.io/posts/my-gosrc-build-post/</link><pubDate>Thu, 04 Aug 2022 11:47:53 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/my-gosrc-build-post/</guid><description>学习go的源码编译
下载源码仓库 git clone git@github.com:golang/go.git 我选择了其中一个分支 release-branch.go1.18
git checkout release-branch.go1.18 目录结构
$ tree -d -L 2 . ├── api ├── bin ├── doc ├── lib │ └── time ├── misc │ ├── android │ ├── arm │ ├── cgo │ ├── chrome │ ├── ios │ ├── linkcheck │ ├── reboot │ ├── swig │ ├── trace │ └── wasm ├── pkg │ ├── darwin_arm64 │ ├── include │ ├── obj │ └── tool ├── src │ ├── archive │ ├── bufio │ ├── builtin │ ├── bytes │ ├── cmd │ ├── compress │ ├── container │ ├── context │ ├── crypto │ ├── database │ ├── debug │ ├── embed │ ├── encoding │ ├── errors │ ├── expvar │ ├── flag │ ├── fmt │ ├── go │ ├── hash │ ├── html │ ├── image │ ├── index │ ├── internal │ ├── io │ ├── log │ ├── math │ ├── mime │ ├── net │ ├── os │ ├── path │ ├── plugin │ ├── reflect │ ├── regexp │ ├── runtime │ ├── sort │ ├── strconv │ ├── strings │ ├── sync │ ├── syscall │ ├── testdata │ ├── testing │ ├── text │ ├── time │ ├── unicode │ ├── unsafe │ └── vendor └── test ├── abi ├── alias3.</description></item><item><title>创建自己的github博客</title><link>https://matteo-gz.github.io/posts/my-first-post/</link><pubDate>Thu, 04 Aug 2022 09:48:40 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/my-first-post/</guid><description>准备工作
work flow
github page github page hugo hugo官网 教程 如何使用Hugo在GitHub Pages上搭建免费个人网站 自动化教程 Hugo使用Github Action自动部署博客到Github Pages</description></item></channel></rss>