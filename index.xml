<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>matteo's blog</title><link>https://matteo-gz.github.io/</link><description>This is my cool site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 09 Feb 2025 20:43:04 +0800</lastBuildDate><atom:link href="https://matteo-gz.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Clickhouse</title><link>https://matteo-gz.github.io/posts/clickhouse/</link><pubDate>Sun, 09 Feb 2025 20:43:04 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/clickhouse/</guid><description><![CDATA[Clickhouse作为一种数据仓库的产品.
优点 文档清晰且有AI问答工具. 入门难度很低,拥有Mysql的经验即可. 阿里云也有其产品可以购买,生产稳定,出问题概率低. 数据压缩,存储成本低. 索引速度快. 可以直接录入Mysql作为data source. 交互协议上支持Http协议,伪Mysql协议和原生高性能协议. GUI推荐 DataGrip.
SQL操作 数据管理利用TTL特性进行数据回收.
数据分布 查询
select * from system.parts limit 10; # 目前转移的数据 select * from system.mutations; 计算表大小 SELECT total_bytes/total_rows, table,database, formatReadableSize(total_bytes) AS total_bytes_on_disk FROM system.tables WHERE table = &#39;table&#39;; 表转移 RENAME TABLE database.exist_table TO database.old_table, database.new_table TO database.exist_table; 数据回收 ALTER TABLE database.table DROP PARTITION &#39;20240925&#39;; 修改TTL ALTER TABLE database.table MODIFY TTL timestamp + toIntervalMonth(2); 查看表结构 SELECT name AS field_name, table AS table_name, type AS field_type, comment AS field_comment FROM system.]]></description></item><item><title>Go 内存泄漏排查</title><link>https://matteo-gz.github.io/posts/memprofiling/</link><pubDate>Wed, 14 Aug 2024 07:33:07 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/memprofiling/</guid><description>背景 某次发版后,生产机器的内存相比之前相同负载条件下使用率高,业务无异常影响. 而后带来的影响是,数据库连接资源随着pod数量提升占用提高.
间接处理 回滚版本 每隔固定时间定时重新发版 把所有依赖pkg升级至最新,把Go版本升级至最新 服务拆分,让业务链路保持简单. 直接处理 排查内存泄漏与修复 思路 复现生产环境场景 在测试环境里,对比此次版本的功能改动点进行压测,难以压测的直接for循环将变动函数调用增加10倍来调试或者将time.ticker的频率放大10倍.
使用pyroscope分析 pyroscope https://pyroscope.io/ 是基于golang的pprof工具进行采集.
使用pprof go官方自带的工具 https://github.com/google/pprof
使用perf perf是个经典的分析工具, https://github.com/google/perf_data_converter 可以将perf的分析报告转化为pprof的格式进行分析
pprof着手分析 下载heap分析文件 接入pprof后,可用curl下载分析文件 curl -o heapfile http://localhost/debug/pprof/heap?seconds=30 . 上述命令可捕获30秒的堆文件分析.
查看pprof官方自带文档 关于pprof的使用说明,请务必看完 https://github.com/google/pprof/blob/main/doc/README.md 该文讲述了
pprof字段 flat cum 代表的含义. 可通过web的方式进行UI交互或者cli方式交互. go tool pprof -http :8810 heapfile 调用图里面的颜色,矩形大小,矩形边缘粗细,虚线箭头和实线箭头的含义解释 可对比2个时间段的pprof文件,go tool pprof --base base.heap current.heap 内存采样率控制 runtime.MemProfileRate 采样率控制.
假设runtime.MemProfileRate=N,那么采样为1/N进行.如果觉得采样率小了,可以在测试环境进行调整.
空闲 Heap http://localhost/debug/pprof/heap?debug=1 有个HeapIdle指标.
下载go官方源码用IDE打开即可明白各个指标的含义,比如HeapIdle .
HeapIdle = HeapSys - heapInUse</description></item><item><title>linux压测配置优化</title><link>https://matteo-gz.github.io/posts/press_linux/</link><pubDate>Wed, 29 May 2024 00:21:12 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/press_linux/</guid><description><![CDATA[背景 临时租赁服务器,进行灰度压测,进行大量并发cURL.测试机器压榨单机极限性能.
修改单进程句柄限制 查看进程最大文件数 # 查看进程最大文件数 ulimit -n 修改进程最大文件数 ulimit -SHn 1048576 S 表示设置软限制（soft limit）。软限制是指系统允许进程使用的资源上限，但进程可以尝试超过这个限制。 H 表示设置硬限制（hard limit）。硬限制是指系统绝对允许进程使用的资源上限，即使进程尝试超过这个限制，系统也会阻止它。 n 表示设置进程可以打开的文件描述符的最大数量 # 防止重启后失效 echo ulimit -HSn 1048576 &gt;&gt; /etc/rc.local echo ulimit -HSn 1048576 &gt;&gt;/root/.bash_profile ulimit影响因素 fs.nr_open;进程最大文件描述符数 fs.file-max;系统最大文件描述符数 修改/etc/sysctl.conf # /etc/sysctl.conf fs.file-max = 1048576 fs.nr_open=1048576 nf_conntrack_max 开启 防止配置net.nf_conntrack_max报错
# 校验conntrack是否开启 lsmod |grep conntrack # 开启 ip_conntrack modprobe ip_conntrack /etc/sysctl.conf配置修改 # 套接字优化 # 每个套接字的缓冲区大小 net.core.optmem_max= 81920 # 套接字接收缓冲区大小 net.core.rmem_max=513920 # 套接字发送缓冲区大小 net.core.wmem_max=513920 # TCP 接收缓冲区大小 net.]]></description></item><item><title>linux排查</title><link>https://matteo-gz.github.io/posts/linux_debug/</link><pubDate>Sat, 25 May 2024 14:45:53 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/linux_debug/</guid><description>Linux性能优化实战 笔记 https://time.geekbang.org/column/intro/100020901
模拟工具 stress stress 是一个 Linux 系统压力测试工具，这里我们用作异常进程模拟平均负载升高的场景
apk add stress-ng
# 一个 CPU 使用率 100% stress --cpu 1 --timeout 600 # 模拟 I/O 压力 stress -i 1 --timeout 600 # 8个进程 stress -c 8 --timeout 600 sysbench sysbench 是一个多线程的基准测试工具，一般用来评估不同系统参数下的数据库负载情况
# 以10个线程运行5分钟的基准测试，模拟多线程切换的问题 $ sysbench --threads=10 --max-time=300 threads run ab ab（apache bench）是一个常用的 HTTP 服务性能测试工具
# 并发10个请求测试Nginx性能，总共测试100个请求 $ ab -c 10 -n 100 http://192.168.0.10:10000/ 排查工具 uptime 系统负载 了解系统的负载情况
$ uptime 14:42 up 56 days, 18:09, 2 users, load averages: 1.</description></item><item><title>supervisor搭建</title><link>https://matteo-gz.github.io/posts/supervisor/</link><pubDate>Thu, 23 May 2024 17:44:27 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/supervisor/</guid><description># 下载 pip install supervisor # 初始化配置 echo_supervisord_conf &amp;gt; /etc/supervisord.conf vim /etc/supervisord.conf append
[program:process1] command=/root/process1 autorestart=true # 载入服务 supervisord -c /etc/supervisord.conf # 启动 supervisorctl start process1 # 停止 supervisorctl stop process1 # 更新了 /etc/supervisord.conf后 supervisorctl reload</description></item><item><title>排查网络</title><link>https://matteo-gz.github.io/posts/network_check/</link><pubDate>Sat, 27 Apr 2024 18:17:11 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/network_check/</guid><description>检查TCP端口连通性 nc -vz www.example.com 80 v是verbose mode
使用-z参数快速扫描端口状态,是否开放
window下powershell Test-NetConnection -ComputerName 127.0.0.1 -Port 6379
检查网络延时 mtr baidu.com -r 数字单位是ms,r是report的意思
ping ping检查范围限于ICMP协议
kill端口 window
# 寻找占用80端口 netstat -ano |findstr 80 # kill进程 taskkill /f /pid 28020 找到进程的启动命令 window环境
wmic process where &amp;#34;processid=1323&amp;#34; get processid,commandline</description></item><item><title>Redis实操记录</title><link>https://matteo-gz.github.io/posts/redis/</link><pubDate>Sat, 27 Apr 2024 00:18:43 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/redis/</guid><description>redis架构 目的: 针对不同的业务特性,选择合适的架构.
单机模式 一台redis节点,适合本地使用.
若机器挂了则无解.
主从模式 一台写节点,多台从节点,适合多读少写场景.
若写压力上来,则无解.
哨兵模式 写节点自动转移,满足高可用.适合多读少写场景.
若写压力上来,则有瓶颈.写节点挂了会转移,写节点会故障一段时间. 若不彻底解决写压力,无法根治问题.
集群模式 属于分布式架构,可以堆机器解决写压力.
redis连接数 目的: 提高应用性能,避免频繁的创建和销毁连接.
使用redis连接池.
需要埋点redis连接池的命中率.
若空闲连接持续为空,则明显连接数不够用需要提升.
根据业务压测,确定redis连接数的合理范围.
关闭连接 当应用关闭时,记得close连接.
redis缓存策略 获取redis缓存策略 config get maxmemory-policy 默认是noeviction
LRU与LFU算法 Least Recently Used :最近最少使用 Least Frequently Used : 最近最不常用 阿里云的redis策略是选择volatile-lru
redis.conf
maxmemory-policy volatile-lru 查询redis的热点key lfu算法下可使用redis-cli --hotkeys,查询redis的热点key.
线上排查 查找大key redis-cli --bigkeys
设置慢日志 # 慢日志长度 CONFIG GET slowlog-max-len # 设置 慢日志长度 CONFIG SET slowlog-max-len 128 设置慢日志时间
# 单位时间为微妙 CONFIG SET slowlog-log-slower-than 10000 获取慢日志</description></item><item><title>Go metrics</title><link>https://matteo-gz.github.io/posts/gometrics/</link><pubDate>Thu, 08 Feb 2024 10:20:57 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/gometrics/</guid><description><![CDATA[导入包 go get -u github.com/go-kratos/kratos/contrib/metrics/prometheus/v2 注册路由 // 导入pkg import &#34;github.com/prometheus/client_golang/prometheus/promhttp&#34; // http 服务注册此路由 router.Handle(&#34;/metrics&#34;, promhttp.Handler()) 验证是否引入metrics curl /metrics 可以看到默认的数据
定义一个指标 var _metricRequests = prometheus.NewCounterVec(prometheus.CounterOpts{ Namespace: &#34;server&#34;, Subsystem: &#34;requests&#34;, Name: &#34;code_total&#34;, Help: &#34;The total number of processed requests&#34;, }, []string{&#34;kind&#34;, &#34;operation&#34;, &#34;code&#34;, &#34;reason&#34;}) 注册该指标 import &#34;github.com/prometheus/client_golang/prometheus&#34; prometheus.MustRegister(_metricRequests) 使用指标 var requests = prom.NewCounter(_metricRequests) requests.With(&#34;get&#34;, &#34;/&#34;, &#34;200&#34;, &#34;OK&#34;).Inc() 验证定义指标是否生效 当我们使用完指标后 即可查看
# HELP server_requests_code_total The total number of processed requests # TYPE server_requests_code_total counter server_requests_code_total{code=&#34;200&#34;,kind=&#34;get&#34;,operation=&#34;/&#34;,reason=&#34;OK&#34;} 1 具体代码 https://github.]]></description></item><item><title>小米解锁BL</title><link>https://matteo-gz.github.io/posts/xiaomiunlock/</link><pubDate>Sat, 30 Dec 2023 17:01:21 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/xiaomiunlock/</guid><description>这个办法是通过闲鱼APP上找人,利用UBL key解锁小米BL.
此方法需要消耗金钱,即购买UBL key的钱.
免费的方法为 https://github.com/MlgmXyysd/Xiaomi-HyperOS-BootLoader-Bypass ,但是无法解锁小米14之后的机型.
准备工作 下载客户端 https://xiaomikey.net/ window环境需要
下载驱动 https://xiaomiflashtool.com/
让xiaomikey客户端识别出小米手机,
理论上xiaomikey软件里面包含了xiaomiflash
下载ADB https://developer.android.com/tools/releases/platform-tools
将路径追加尽系统path.
adb devices 准备刷机 小米手机进入开发者模式 点击系统版本 连续点击5次 即可进入开发者模式
开发者模式下进行USB调试 要求
必须登录小米账号 必须插入sim卡 必须使用移动网络 在开发者模式下 打开允许USB调试.
电脑插入手机,手机选择信任电脑的连接.
adb进入fastboot模式 # 查看设备 adb devices # 进入fastboot adb reboot bootloader 登录xiaomikey 打开软件,选择 unlock boot- ubl key.
点击 unlock bootloader
此时会读取fastboot模式下的小米手机信息.
此时会生成 UBL token.
将UBL token 兑换成 UBL key.
然后填入UBL key 点击apply ubl key 可解锁.
过程中确保网络能连接小米服务器.
若操作失败 如果点击unlock bootloader后遇到duplicate token的话</description></item><item><title>socks5 协议</title><link>https://matteo-gz.github.io/posts/socks5/</link><pubDate>Wed, 13 Dec 2023 21:16:44 +0800</pubDate><author>Author</author><guid>https://matteo-gz.github.io/posts/socks5/</guid><description>资料 rfc1928 SOCKS Protocol Version 5
https://datatracker.ietf.org/doc/html/rfc1928
socks5目标: TCP 和 UDP 域中的客户端-服务器应用程序提供一个框架，以便方便、安全地使用网络防火墙的服务
字节序 0x01234567 在字节顺序中表现
Big-Endian
0x100: 0x01 0x101: 0x23 0x102: 0x45 0x103: 0x67 Little-Endian
0x100: 0x67 0x101: 0x45 0x102: 0x23 0x103: 0x01 rfc1929 Username/Password Authentication for SOCKS V5
https://datatracker.ietf.org/doc/html/rfc1929
过程 1.TCP连接 3次握手后,客户端 连接 服务端socks5端口1080
2.协商环节 2.1.客户端发送给服务端 X'05&amp;rsquo; , X开头的数据都是十六进制
报文格式:
+----+----------+----------+ |VER | NMETHODS | METHODS | +----+----------+----------+ | 1 | 1 | 1 to 255 | +----+----------+----------+ 字段解释:</description></item></channel></rss>